"""all the revisions done and extras added

Revision ID: a6badec5f484
Revises: 140052189d1a
Create Date: 2025-10-03 22:57:20.289830

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a6badec5f484'
down_revision: Union[str, None] = '140052189d1a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('jti', sa.String(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('revoked', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('jti'),
    comment='Refresh tokens for JWT authentication'
    )
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.drop_index('ix_revoked_tokens_id', table_name='revoked_tokens')
    op.drop_table('revoked_tokens')
    op.alter_column('bookings', 'status',
               existing_type=sa.VARCHAR(length=15),
               type_=sa.Enum('pending', 'confirmed', 'cancelled', 'completed', name='bookingstatus'),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.create_table_comment(
        'bookings',
        'Booking table with UUID primary keys',
        existing_comment=None,
        schema=None
    )
    op.alter_column('reviews', 'comments',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.drop_constraint('reviews_booking_id_fkey', 'reviews', type_='foreignkey')
    op.create_foreign_key(None, 'reviews', 'bookings', ['booking_id'], ['id'], ondelete='CASCADE')
    op.alter_column('services', 'description',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('services', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.create_foreign_key('reviews_booking_id_fkey', 'reviews', 'bookings', ['booking_id'], ['id'])
    op.alter_column('reviews', 'comments',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.drop_table_comment(
        'bookings',
        existing_comment='Booking table with UUID primary keys',
        schema=None
    )
    op.alter_column('bookings', 'status',
               existing_type=sa.Enum('pending', 'confirmed', 'cancelled', 'completed', name='bookingstatus'),
               type_=sa.VARCHAR(length=15),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.create_table('revoked_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('jti', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='revoked_tokens_pkey'),
    sa.UniqueConstraint('jti', name='revoked_tokens_jti_key')
    )
    op.create_index('ix_revoked_tokens_id', 'revoked_tokens', ['id'], unique=False)
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    # ### end Alembic commands ###
